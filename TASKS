# CLIENT 
- [ ] do setup with json from admin
- [x] hash number x times and keep in list[x]
- [ ] send udp packet (3 times in case it gets lost?)
    - [x] 99th hash (= ticket)
    - [x] ip (ipv4, ipv6)
    - [ ] (port opening duration)
    - [x] signature
- [ ] try to tcp connect to port z 
    - [ ] succes: yay
    - [ ] failure: (5 sec without connection) resend udp packets

# SERVER
- [ ] read list of users and their details
- [x] listen on port y for udp from client
- [ ] when receiving packet:
    - [ ] verify signature
    - [x] hash ticket & compare with stored hash
    - [ ] if same: 
        - [ ] write new ticket to disk in config 
        - [ ] run script to open port z for client ip
        - [ ] run script to close port after duration)
    - [ ] else: nothing

# ADMIN
- [x] enter number of tickets n
- [x] enter list of users with corresponding privileges (multiple users can have the same port)
- [ ] generate:
    - [ ] a keypair per user for signing (one pair per user so that if one user is hacked, it wont compromise the all other users' signatures)
    - [ ] secret key
    - [ ] first ticket (secret hashed n times)
- [.] save to server config file for each user:
    - [x] user id
    - [x] user name
    - [x] number of tickets (n)
    - [x] ports
    - [ ] digest (first ticket) from hashin the secret n times
- [.] generate one setup json per user. should contain:
    - [x] user id
    - [x] server ip + port for authenticating
    - [ ] secret
    - [x] number of tickets
    - [ ] pub key for enrypting
    - [ ] server ip + port for tcp connecting 
- [x] generate setup files for all users
- [ ] generate user setup files in own sub directory
- [ ] update user details
    - [ ] change name
    - [ ] generate new priv pub key pair
    - [ ] generate new secret
    - [ ] change secret
- [x] delete all users
- [x] delete single user by id

# Requirements
- everything used must be open source
- server breach should not compromise tickets and user authentication method
- port always closes automatically 2 hours after authenticating and user must re-authenticate (cron jobs)

# Questions
- 